<?php

/**
 * This class is an abstraction of a solicitation of password recovery
 * @author Cassiano Vellames <c.vellames@outlook.com>
 * @since 1.0.0
 */
final class PasswordRecoverySolicitationBean implements IBean, JsonSerializable {

    /**
     * @var int The id is a primary key identifier of the register in table. Is automatic generated by the database
     */
    private $id;

    /**
     * @var UserBean User that are requesting the password change
     */
    private $user;

    /**
     * @var string This field storage the situation of solicitation. Use 'P' for "Pending" or 'A' for "Accepted"
     */
    private $status;

    /**
     * @var string The code is a pseudo-random-hash used to validate the new password request
     */
    private $code;

    /**
     * @var DateTime Date and Time that the hash is valid
     */
    private $expiration;

    public function __construct(UserBean $user, string $status, string $code, DateTime $expiration, int $id = null){
        $this->user = $this->setUser($user);
        $this->status = $this->setStatus($status);
        $this->code = $this->setCode($code);
        $this->expiration = $this->setExpiration($expiration);
        $this->id = $this->setId($id);
    }

    public function getId(): int {
        return $this->id;
    }

    public function setId(int $id) {
        $this->id = $id;
    }

    public function getUser(): UserBean {
        return $this->user;
    }

    public function setUser(UserBean $user) {
        $this->user = $user;
    }

    public function getStatus(): string {
        return $this->status;
    }

    public function setStatus(string $status) {
        $this->status = $status;
    }

    public function getCode(): string {
        return $this->code;
    }

    public function setCode(string $code) {
        $this->code = $code;
    }

    public function getExpiration(): DateTime {
        return $this->expiration;
    }

    public function setExpiration(DateTime $expiration) {
        $this->expiration = $expiration;
    }

    /**
     * Specify data which should be serialized to JSON
     * @link http://php.net/manual/en/jsonserializable.jsonserialize.php
     * @return mixed data which can be serialized by <b>json_encode</b>,
     * which is a value of any type other than a resource.
     * @since 5.4.0
     */
    function jsonSerialize(){
        // TODO: Implement jsonSerialize() method.
    }
}